{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!DOCTYPE html>\n",
    "<html>\n",
    "<body>\n",
    "\n",
    "<h2 style=\"color:black;\">CIS 9650 Group Project - Spring 2021 </h2>\n",
    "    <h3> Part B: Data Analysis Module </h3>\n",
    "    <p> <h4>  FP-Group-03 Members: </h4> <br>\n",
    "        1. Aarif Munwar Jahan <br>\n",
    "        2. Amanda Loh <br>\n",
    "        3. Manvinder Singh <br>\n",
    "        4. Prakriti AC\n",
    "    </p>\n",
    "\n",
    "</body>\n",
    "</html>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!DOCTYPE html>\n",
    "<html>\n",
    "<body>\n",
    "\n",
    "<h3 style=\"color:black;\"> Module Overview: </h3>\n",
    "    <p>In this module, data analysis techniques using pandas, numpy, seaborn and statsmodels packages are utilized to collect effective insights from the data and plot necessary graphs. The raw csv data is the same table we collected in Part A of the project taken from the <a href=\"https://www.worldometers.info/coronavirus/\"> worldometer website </a> regarding COVID cases tabulated by country.</p>\n",
    "    <p> The notebook has a total of twelve code blocks. <br><br>\n",
    "        1.  Importing a CSV file, reading it and counting no. of rows and columns  <br>\n",
    "        2.  Using the to_numeric method to ensure all numerical columns get passed as numeric <br>\n",
    "        3.  Using the describe function to display and analyze basic statistical data on the numerical columns of the imported data  <br>\n",
    "        4.  Working with a smaller set of imported data - Top 20 countries with most cases <br>\n",
    "        5.  Horizontal bar chart to analyze total cases in the top 20 countries <br>\n",
    "        6.  Vertical bar chart to analyze total deaths in the top 20 countries with most cases <br>\n",
    "        7.  Distribution plot to analyze spread of data for Deaths/1M Population of the 20 countries <br>\n",
    "        8.  Using the describe function to display basic statistical data on the numerical columns of the REDUCED dataset <br>\n",
    "        9.  Comparing and analyzing mean and standard deviation between population of the Full dataset and the Reduced dataset <br>\n",
    "        10. Using regression scatter plot to check for data independence between tests/million people and the size of the population <br>\n",
    "        11. Finding and analyzing correlations between the variables in the dataset <br>\n",
    "        12. Applying a statistical model to collect useful information about Total Cases and Total Deaths in the full data set <br>\n",
    "         <br>\n",
    "    </p>\n",
    " \n",
    "</body>\n",
    "</html>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!DOCTYPE html>\n",
    "<html>\n",
    "<body>\n",
    "\n",
    "<h3 style=\"color:blue;\"> Importing a CSV file, reading it and counting no. of rows and columns </h3>\n",
    "\n",
    "</body>\n",
    "</html>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The imported csv data has 222 rows\n",
      "The imported csv data has 14 columns\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Total Cases</th>\n",
       "      <th>New Cases</th>\n",
       "      <th>Total Deaths</th>\n",
       "      <th>New Deaths</th>\n",
       "      <th>Total Recovered</th>\n",
       "      <th>New Recovered</th>\n",
       "      <th>Active Cases</th>\n",
       "      <th>Serious,Critical Cases</th>\n",
       "      <th>Cases/1M Population</th>\n",
       "      <th>Deaths/1M Population</th>\n",
       "      <th>Total Tests</th>\n",
       "      <th>Tests/1M Population</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>USA</td>\n",
       "      <td>33770030</td>\n",
       "      <td>22591</td>\n",
       "      <td>601234</td>\n",
       "      <td>636</td>\n",
       "      <td>27242004</td>\n",
       "      <td>39695</td>\n",
       "      <td>5926792</td>\n",
       "      <td>7748</td>\n",
       "      <td>101503</td>\n",
       "      <td>1807</td>\n",
       "      <td>467918133</td>\n",
       "      <td>1406421</td>\n",
       "      <td>332701437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>India</td>\n",
       "      <td>25495144</td>\n",
       "      <td>267174</td>\n",
       "      <td>283276</td>\n",
       "      <td>4525</td>\n",
       "      <td>21979703</td>\n",
       "      <td>389700</td>\n",
       "      <td>3232165</td>\n",
       "      <td>8944</td>\n",
       "      <td>18317</td>\n",
       "      <td>204</td>\n",
       "      <td>318292881</td>\n",
       "      <td>228681</td>\n",
       "      <td>1391864443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>15732836</td>\n",
       "      <td>71730</td>\n",
       "      <td>439050</td>\n",
       "      <td>2188</td>\n",
       "      <td>14152433</td>\n",
       "      <td>0</td>\n",
       "      <td>1141353</td>\n",
       "      <td>8318</td>\n",
       "      <td>73559</td>\n",
       "      <td>2053</td>\n",
       "      <td>47073060</td>\n",
       "      <td>220090</td>\n",
       "      <td>213881340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>France</td>\n",
       "      <td>5898347</td>\n",
       "      <td>17210</td>\n",
       "      <td>108040</td>\n",
       "      <td>198</td>\n",
       "      <td>5181684</td>\n",
       "      <td>29118</td>\n",
       "      <td>608623</td>\n",
       "      <td>4015</td>\n",
       "      <td>90189</td>\n",
       "      <td>1652</td>\n",
       "      <td>81932887</td>\n",
       "      <td>1252795</td>\n",
       "      <td>65400058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Turkey</td>\n",
       "      <td>5139485</td>\n",
       "      <td>11937</td>\n",
       "      <td>45186</td>\n",
       "      <td>203</td>\n",
       "      <td>4971245</td>\n",
       "      <td>10125</td>\n",
       "      <td>123054</td>\n",
       "      <td>2232</td>\n",
       "      <td>60371</td>\n",
       "      <td>531</td>\n",
       "      <td>51294008</td>\n",
       "      <td>602522</td>\n",
       "      <td>85132141</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Country  Total Cases  New Cases  Total Deaths  New Deaths  Total Recovered  \\\n",
       "0     USA     33770030      22591        601234         636         27242004   \n",
       "1   India     25495144     267174        283276        4525         21979703   \n",
       "2  Brazil     15732836      71730        439050        2188         14152433   \n",
       "3  France      5898347      17210        108040         198          5181684   \n",
       "4  Turkey      5139485      11937         45186         203          4971245   \n",
       "\n",
       "   New Recovered  Active Cases  Serious,Critical Cases  Cases/1M Population  \\\n",
       "0          39695       5926792                    7748               101503   \n",
       "1         389700       3232165                    8944                18317   \n",
       "2              0       1141353                    8318                73559   \n",
       "3          29118        608623                    4015                90189   \n",
       "4          10125        123054                    2232                60371   \n",
       "\n",
       "   Deaths/1M Population  Total Tests  Tests/1M Population  Population  \n",
       "0                  1807    467918133              1406421   332701437  \n",
       "1                   204    318292881               228681  1391864443  \n",
       "2                  2053     47073060               220090   213881340  \n",
       "3                  1652     81932887              1252795    65400058  \n",
       "4                   531     51294008               602522    85132141  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import all necessary packages, pandas to use dataframes etc., numpy to use ndarrays etc. \n",
    "# and matplotlib to plot graphs\n",
    "\n",
    "import pandas as pd\n",
    "import numpy\n",
    "import seaborn\n",
    "import matplotlib.pyplot as plt\n",
    "from pandas import Series,DataFrame\n",
    "\n",
    "\n",
    "# Read csv file located in the same directory as the JNB file\n",
    "# low memory clause used for efficiency purpose even though relative size of data is low\n",
    "# This is the same csv file that was exported in Part A from the worldometer website containing COVID case data\n",
    "data = pd.read_csv('Country_Data.csv', low_memory=False)\n",
    "\n",
    "# Calculate and display number of rows and columns of the imported csv\n",
    "print(\"The imported csv data has {} rows\".format(len(data)))\n",
    "print(\"The imported csv data has {} columns\".format(len(data.columns)))\n",
    "\n",
    "# Display the first 5 (default) rows of the imported data and analyze the structure\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Analysis: The data set is intrinisically sorted descending on Total Cases\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nAnalysis: The data set is intrinisically sorted descending on Total Cases\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!DOCTYPE html>\n",
    "<html>\n",
    "<body>\n",
    "\n",
    "<h3 style=\"color:blue;\"> Using the to_numeric method to ensure all numerical columns get passed as numeric </h3>\n",
    "\n",
    "</body>\n",
    "</html>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Analysis: All columns apart from the country column are numerical\n"
     ]
    }
   ],
   "source": [
    "# Convert and confirm all numerical columns to be indeed numeric\n",
    "data['Total Cases']=pd.to_numeric(data['Total Cases'])\n",
    "data['Total Deaths']=pd.to_numeric(data['Total Deaths'])\n",
    "data['Total Recovered']=pd.to_numeric(data['Total Recovered'])\n",
    "data['Active Cases']=pd.to_numeric(data['Active Cases'])\n",
    "data['Cases/1M Population']=pd.to_numeric(data['Cases/1M Population'])\n",
    "data['Deaths/1M Population']=pd.to_numeric(data['Deaths/1M Population'])\n",
    "data['Total Tests']=pd.to_numeric(data['Total Tests'])\n",
    "data['Tests/1M Population']=pd.to_numeric(data['Tests/1M Population'])\n",
    "data['Population']=pd.to_numeric(data['Population'])\n",
    "\n",
    "print(\"\\nAnalysis: All columns apart from the country column are numerical\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!DOCTYPE html>\n",
    "<html>\n",
    "<body>\n",
    "\n",
    "<h3 style=\"color:blue;\"> Using the describe function to display and analyze basic statistical data on the numerical columns of the imported data </h3>\n",
    "\n",
    "</body>\n",
    "</html>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total Cases</th>\n",
       "      <th>New Cases</th>\n",
       "      <th>Total Deaths</th>\n",
       "      <th>New Deaths</th>\n",
       "      <th>Total Recovered</th>\n",
       "      <th>New Recovered</th>\n",
       "      <th>Active Cases</th>\n",
       "      <th>Serious,Critical Cases</th>\n",
       "      <th>Cases/1M Population</th>\n",
       "      <th>Deaths/1M Population</th>\n",
       "      <th>Total Tests</th>\n",
       "      <th>Tests/1M Population</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>222.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>2.220000e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>742334.0</td>\n",
       "      <td>2369.0</td>\n",
       "      <td>15386.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>652506.0</td>\n",
       "      <td>3026.0</td>\n",
       "      <td>74442.0</td>\n",
       "      <td>454.0</td>\n",
       "      <td>32506.0</td>\n",
       "      <td>537.0</td>\n",
       "      <td>10542389.0</td>\n",
       "      <td>634837.0</td>\n",
       "      <td>3.524930e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3116583.0</td>\n",
       "      <td>18652.0</td>\n",
       "      <td>58191.0</td>\n",
       "      <td>342.0</td>\n",
       "      <td>2625860.0</td>\n",
       "      <td>26411.0</td>\n",
       "      <td>460871.0</td>\n",
       "      <td>1335.0</td>\n",
       "      <td>37136.0</td>\n",
       "      <td>707.0</td>\n",
       "      <td>42688285.0</td>\n",
       "      <td>1121169.0</td>\n",
       "      <td>1.394775e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4840.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3756.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>126.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1736.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>102932.0</td>\n",
       "      <td>40688.0</td>\n",
       "      <td>6.146180e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>44443.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>759.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38614.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3098.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>16133.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>755088.0</td>\n",
       "      <td>234533.0</td>\n",
       "      <td>6.202722e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>324492.0</td>\n",
       "      <td>451.0</td>\n",
       "      <td>5366.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>286407.0</td>\n",
       "      <td>375.0</td>\n",
       "      <td>23310.0</td>\n",
       "      <td>185.0</td>\n",
       "      <td>60457.0</td>\n",
       "      <td>838.0</td>\n",
       "      <td>4564171.0</td>\n",
       "      <td>700140.0</td>\n",
       "      <td>2.326388e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>33770030.0</td>\n",
       "      <td>267174.0</td>\n",
       "      <td>601234.0</td>\n",
       "      <td>4525.0</td>\n",
       "      <td>27242004.0</td>\n",
       "      <td>389700.0</td>\n",
       "      <td>5926792.0</td>\n",
       "      <td>8944.0</td>\n",
       "      <td>175371.0</td>\n",
       "      <td>3037.0</td>\n",
       "      <td>467918133.0</td>\n",
       "      <td>8253136.0</td>\n",
       "      <td>1.439324e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Total Cases  New Cases  Total Deaths  New Deaths  Total Recovered  \\\n",
       "count        222.0      222.0         222.0       222.0            222.0   \n",
       "mean      742334.0     2369.0       15386.0        51.0         652506.0   \n",
       "std      3116583.0    18652.0       58191.0       342.0        2625860.0   \n",
       "min            1.0        0.0           0.0         0.0              1.0   \n",
       "25%         4840.0        0.0          85.0         0.0           3756.0   \n",
       "50%        44443.0        1.0         759.0         0.0          38614.0   \n",
       "75%       324492.0      451.0        5366.0         8.0         286407.0   \n",
       "max     33770030.0   267174.0      601234.0      4525.0       27242004.0   \n",
       "\n",
       "       New Recovered  Active Cases  Serious,Critical Cases  \\\n",
       "count          222.0         222.0                   222.0   \n",
       "mean          3026.0       74442.0                   454.0   \n",
       "std          26411.0      460871.0                  1335.0   \n",
       "min              0.0           0.0                     0.0   \n",
       "25%              0.0         126.0                     0.0   \n",
       "50%              0.0        3098.0                    14.0   \n",
       "75%            375.0       23310.0                   185.0   \n",
       "max         389700.0     5926792.0                  8944.0   \n",
       "\n",
       "       Cases/1M Population  Deaths/1M Population  Total Tests  \\\n",
       "count                222.0                 222.0        222.0   \n",
       "mean               32506.0                 537.0   10542389.0   \n",
       "std                37136.0                 707.0   42688285.0   \n",
       "min                    0.0                   0.0          0.0   \n",
       "25%                 1736.0                  25.0     102932.0   \n",
       "50%                16133.0                 190.0     755088.0   \n",
       "75%                60457.0                 838.0    4564171.0   \n",
       "max               175371.0                3037.0  467918133.0   \n",
       "\n",
       "       Tests/1M Population    Population  \n",
       "count                222.0  2.220000e+02  \n",
       "mean              634837.0  3.524930e+07  \n",
       "std              1121169.0  1.394775e+08  \n",
       "min                    0.0  0.000000e+00  \n",
       "25%                40688.0  6.146180e+05  \n",
       "50%               234533.0  6.202722e+06  \n",
       "75%               700140.0  2.326388e+07  \n",
       "max              8253136.0  1.439324e+09  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display basic statistical metrics for imported data and round it out\n",
    "data.describe().round(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Analysis:\n",
      " \n",
      " The mean of Serious Cases compared with Active Cases is trending on the lower side,\n",
      " \n",
      " The mean of Total Tests compared with Active Cases has good margin hinting towards overall effective testing\n",
      " \n"
     ]
    }
   ],
   "source": [
    "print(\"\"\"\n",
    " Analysis:\n",
    " \n",
    " The mean of Serious Cases compared with Active Cases is trending on the lower side,\n",
    " \n",
    " The mean of Total Tests compared with Active Cases has good margin hinting towards overall effective testing\n",
    " \"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!DOCTYPE html>\n",
    "<html>\n",
    "<body>\n",
    "\n",
    "<h3 style=\"color:blue;\"> Working with a smaller set of imported data - Top 20 countries with most cases</h3>\n",
    "\n",
    "</body>\n",
    "</html>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Total Cases</th>\n",
       "      <th>Total Deaths</th>\n",
       "      <th>Total Recovered</th>\n",
       "      <th>Active Cases</th>\n",
       "      <th>Cases/1M Population</th>\n",
       "      <th>Deaths/1M Population</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>USA</td>\n",
       "      <td>33770030</td>\n",
       "      <td>601234</td>\n",
       "      <td>27242004</td>\n",
       "      <td>5926792</td>\n",
       "      <td>101503</td>\n",
       "      <td>1807</td>\n",
       "      <td>332701437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>India</td>\n",
       "      <td>25495144</td>\n",
       "      <td>283276</td>\n",
       "      <td>21979703</td>\n",
       "      <td>3232165</td>\n",
       "      <td>18317</td>\n",
       "      <td>204</td>\n",
       "      <td>1391864443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>15732836</td>\n",
       "      <td>439050</td>\n",
       "      <td>14152433</td>\n",
       "      <td>1141353</td>\n",
       "      <td>73559</td>\n",
       "      <td>2053</td>\n",
       "      <td>213881340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>France</td>\n",
       "      <td>5898347</td>\n",
       "      <td>108040</td>\n",
       "      <td>5181684</td>\n",
       "      <td>608623</td>\n",
       "      <td>90189</td>\n",
       "      <td>1652</td>\n",
       "      <td>65400058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Turkey</td>\n",
       "      <td>5139485</td>\n",
       "      <td>45186</td>\n",
       "      <td>4971245</td>\n",
       "      <td>123054</td>\n",
       "      <td>60371</td>\n",
       "      <td>531</td>\n",
       "      <td>85132141</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Country  Total Cases  Total Deaths  Total Recovered  Active Cases  \\\n",
       "0     USA     33770030        601234         27242004       5926792   \n",
       "1   India     25495144        283276         21979703       3232165   \n",
       "2  Brazil     15732836        439050         14152433       1141353   \n",
       "3  France      5898347        108040          5181684        608623   \n",
       "4  Turkey      5139485         45186          4971245        123054   \n",
       "\n",
       "   Cases/1M Population  Deaths/1M Population  Population  \n",
       "0               101503                  1807   332701437  \n",
       "1                18317                   204  1391864443  \n",
       "2                73559                  2053   213881340  \n",
       "3                90189                  1652    65400058  \n",
       "4                60371                   531    85132141  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get rid of the testing columns and work with a smaller batch of data with 20 countries\n",
    "\n",
    "dfb = pd.DataFrame(data.head(20), columns=['Country', 'Total Cases', 'Total Deaths', 'Total Recovered', 'Active Cases', 'Cases/1M Population', 'Deaths/1M Population', 'Population'])\n",
    "\n",
    "# Display 5 rows of the reduced data set\n",
    "\n",
    "dfb.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!DOCTYPE html>\n",
    "<html>\n",
    "<body>\n",
    "\n",
    "<h3 style=\"color:blue;\"> Horizontal bar chart to analyze total cases in the top 20 countries </h3>\n",
    "\n",
    "</body>\n",
    "</html>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Analysis: Total Cases in USA, India and Brazil are significantly higher than the rest of the nations\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use a 2 dimensional cat plot to show countries and their total cases in a horizontal bar chart\n",
    "%matplotlib inline\n",
    "countries_cases = seaborn.catplot(x=\"Total Cases\", y=\"Country\", data=dfb, kind=\"bar\", orient =\"h\", ci=None)  # ci refers to error bars\n",
    "\n",
    "# Label the appropriate axes\n",
    "plt.xlabel(\"Total Cases\")\n",
    "plt.ylabel(\"Countries\")\n",
    "\n",
    "print(\"\\nAnalysis: Total Cases in USA, India and Brazil are significantly higher than the rest of the nations\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!DOCTYPE html>\n",
    "<html>\n",
    "<body>\n",
    "\n",
    "<h3 style=\"color:blue;\"> Vertical bar chart to analyze total deaths in the top 20 countries with most cases </h3>\n",
    "\n",
    "</body>\n",
    "</html>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Analysis: Total Deaths in USA, Brzil, India and Mexico are significantly higher than the rest of the nations\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use a 2 dimensional cat plot to show countries and their total cases in a vertical bar chart\n",
    "%matplotlib inline\n",
    "countries_cases = seaborn.catplot(x = 'Country', y = 'Total Deaths', data = dfb, kind = 'bar', ci = None)  # ci refers to error bars\n",
    "\n",
    "# Label the appropriate axes\n",
    "plt.xlabel(\"Countries\")\n",
    "plt.ylabel('Total Deaths')\n",
    "\n",
    "# Rotate the x labels for better readability\n",
    "countries_cases.set_xticklabels(rotation=90)\n",
    "\n",
    "print(\"\\nAnalysis: Total Deaths in USA, Brzil, India and Mexico are significantly higher than the rest of the nations\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!DOCTYPE html>\n",
    "<html>\n",
    "<body>\n",
    "\n",
    "<h3 style=\"color:blue;\"> Distribution plot to analyze spread of data for Deaths/1M Population of the 20 countries </h3>\n",
    "\n",
    "</body>\n",
    "</html>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Analysis: The trend shows higher data density around 1750 Deaths/1M Population for the 20 countries\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use a distribution plot, drop any rows or columns with null values and draw a trend line\n",
    "seaborn.displot(dfb['Deaths/1M Population'].dropna(), kde=True)\n",
    "\n",
    "# Label the appropriate axes\n",
    "plt.xlabel(\"Deaths/1M Population\")\n",
    "plt.title(\"Distribution Plot for Deaths/1M Population\")\n",
    "\n",
    "print(\"\\nAnalysis: The trend shows higher data density around 1750 Deaths/1M Population for the 20 countries\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!DOCTYPE html>\n",
    "<html>\n",
    "<body>\n",
    "\n",
    "<h3 style=\"color:blue;\"> Using the describe function to display basic statistical data on the numerical columns of the REDUCED dataset </h3>\n",
    "\n",
    "</body>\n",
    "</html>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total Cases</th>\n",
       "      <th>Total Deaths</th>\n",
       "      <th>Total Recovered</th>\n",
       "      <th>Active Cases</th>\n",
       "      <th>Cases/1M Population</th>\n",
       "      <th>Deaths/1M Population</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>2.000000e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>6520347.0</td>\n",
       "      <td>139183.0</td>\n",
       "      <td>5689459.0</td>\n",
       "      <td>691704.0</td>\n",
       "      <td>59366.0</td>\n",
       "      <td>1419.0</td>\n",
       "      <td>1.633865e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8571474.0</td>\n",
       "      <td>145943.0</td>\n",
       "      <td>7078418.0</td>\n",
       "      <td>1421940.0</td>\n",
       "      <td>33865.0</td>\n",
       "      <td>681.0</td>\n",
       "      <td>3.011739e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1617840.0</td>\n",
       "      <td>29933.0</td>\n",
       "      <td>1527968.0</td>\n",
       "      <td>24405.0</td>\n",
       "      <td>6333.0</td>\n",
       "      <td>176.0</td>\n",
       "      <td>1.072639e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2327082.0</td>\n",
       "      <td>63688.0</td>\n",
       "      <td>1898206.0</td>\n",
       "      <td>115290.0</td>\n",
       "      <td>33651.0</td>\n",
       "      <td>920.0</td>\n",
       "      <td>4.646758e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3475930.0</td>\n",
       "      <td>80656.0</td>\n",
       "      <td>3146784.0</td>\n",
       "      <td>218865.0</td>\n",
       "      <td>60672.0</td>\n",
       "      <td>1622.0</td>\n",
       "      <td>6.679912e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5003188.0</td>\n",
       "      <td>125296.0</td>\n",
       "      <td>4671981.0</td>\n",
       "      <td>347440.0</td>\n",
       "      <td>74059.0</td>\n",
       "      <td>1880.0</td>\n",
       "      <td>1.340848e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>33770030.0</td>\n",
       "      <td>601234.0</td>\n",
       "      <td>27242004.0</td>\n",
       "      <td>5926792.0</td>\n",
       "      <td>154220.0</td>\n",
       "      <td>2791.0</td>\n",
       "      <td>1.391864e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Total Cases  Total Deaths  Total Recovered  Active Cases  \\\n",
       "count         20.0          20.0             20.0          20.0   \n",
       "mean     6520347.0      139183.0        5689459.0      691704.0   \n",
       "std      8571474.0      145943.0        7078418.0     1421940.0   \n",
       "min      1617840.0       29933.0        1527968.0       24405.0   \n",
       "25%      2327082.0       63688.0        1898206.0      115290.0   \n",
       "50%      3475930.0       80656.0        3146784.0      218865.0   \n",
       "75%      5003188.0      125296.0        4671981.0      347440.0   \n",
       "max     33770030.0      601234.0       27242004.0     5926792.0   \n",
       "\n",
       "       Cases/1M Population  Deaths/1M Population    Population  \n",
       "count                 20.0                  20.0  2.000000e+01  \n",
       "mean               59366.0                1419.0  1.633865e+08  \n",
       "std                33865.0                 681.0  3.011739e+08  \n",
       "min                 6333.0                 176.0  1.072639e+07  \n",
       "25%                33651.0                 920.0  4.646758e+07  \n",
       "50%                60672.0                1622.0  6.679912e+07  \n",
       "75%                74059.0                1880.0  1.340848e+08  \n",
       "max               154220.0                2791.0  1.391864e+09  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display basic statistical metrics for imported data and round it out\n",
    "dfb.describe().round(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!DOCTYPE html>\n",
    "<html>\n",
    "<body>\n",
    "\n",
    "<h3 style=\"color:blue;\"> Comparing and analyzing mean and standard deviation between population of the Full dataset and the Reduced dataset </h3>\n",
    "\n",
    "</body>\n",
    "</html>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of the complete data set (221 countries) for Population: 35249305\n",
      "Mean of the reduced data set (20 countries)for Population: 163386464\n",
      "Difference between the two mean is: -128137159\n",
      "\n",
      "Standard Deviation of the complete data set (221 countries) for Population: 139477506\n",
      "Standard Deviation of the reduced data set (20 countries)for Population: 301173865\n",
      "Difference between the two standard deviation is: -161696359\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mean</th>\n",
       "      <th>STdeV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Full Data</th>\n",
       "      <td>3.524931e+07</td>\n",
       "      <td>1.394775e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Reduced Data</th>\n",
       "      <td>1.633865e+08</td>\n",
       "      <td>3.011739e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Difference</th>\n",
       "      <td>-1.281372e+08</td>\n",
       "      <td>-1.616964e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Mean         STdeV\n",
       "Full Data     3.524931e+07  1.394775e+08\n",
       "Reduced Data  1.633865e+08  3.011739e+08\n",
       "Difference   -1.281372e+08 -1.616964e+08"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Analysis:\n",
      "\n",
      "The negative difference in mean explains how the Top 20 nations with high cases have big population size as well,\n",
      "\n",
      "The negative difference in standard deviation explains how some nations in the top 20 have a significantly bigger population size with respect to the other nations\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Calculate mean for full and reduced data using the mean method; find the difference as absolute value\n",
    "mean_full_data = data[\"Population\"].mean()\n",
    "mean_reduced_data = dfb[\"Population\"].mean()\n",
    "mean_diff = mean_full_data - mean_reduced_data\n",
    "\n",
    "# Print the comparison\n",
    "print(\"Mean of the complete data set (221 countries) for Population: {}\".format(str(round(mean_full_data))))\n",
    "print(\"Mean of the reduced data set (20 countries)for Population: {}\".format(str(round(mean_reduced_data))))\n",
    "print(\"Difference between the two mean is: {}\\n\".format(str(round(mean_diff))))\n",
    "\n",
    "# Calculate standard deviation for full and reduced data using the mean method; find the difference as absolute value\n",
    "stdev_full_data = data[\"Population\"].std()\n",
    "stdev_reduced_data = dfb[\"Population\"].std()\n",
    "stdev_diff = stdev_full_data - stdev_reduced_data\n",
    "\n",
    "# Print the comparison\n",
    "print(\"Standard Deviation of the complete data set (221 countries) for Population: {}\".format(str(round(stdev_full_data))))\n",
    "print(\"Standard Deviation of the reduced data set (20 countries)for Population: {}\".format(str(round(stdev_reduced_data))))\n",
    "print(\"Difference between the two standard deviation is: {}\\n\".format(str(round(stdev_diff))))\n",
    "\n",
    "# Insert the collected data into a dataframe for easy visualization\n",
    "df_stats = DataFrame([[mean_full_data, stdev_full_data], [mean_reduced_data, stdev_reduced_data], [mean_diff,stdev_diff]], index=['Full Data','Reduced Data', 'Difference'], columns=['Mean','STdeV'])\n",
    "\n",
    "# Display the created dataframe\n",
    "display(df_stats)\n",
    "\n",
    "# Print analysis statements\n",
    "print(\"\"\"\n",
    "Analysis:\n",
    "\n",
    "The negative difference in mean explains how the Top 20 nations with high cases have big population size as well,\n",
    "\n",
    "The negative difference in standard deviation explains how some nations in the top 20 have a significantly bigger population size with respect to the other nations\n",
    "\"\"\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!DOCTYPE html>\n",
    "<html>\n",
    "<body>\n",
    "\n",
    "<h3 style=\"color:blue;\">Using regression scatter plot to check for data independence between tests/million people and the size of the population</h3>\n",
    "\n",
    "</body>\n",
    "</html>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Analysis:\n",
      "\n",
      "The relationship between Tests/million population and the size of the population is failry consistent,\n",
      "As Tests/1M population increases, the size of the population does not change that much\n",
      "This will help analysts to identify the Tests/million people can grow independent of the population size\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use a regplot to understand the relationship between two variables for the full data set\n",
    "\n",
    "seaborn.regplot(x='Tests/1M Population', y='Population', data=data, fit_reg=True)  # ci refers to error bars\n",
    "\n",
    "# Label the appropriate axes and add a title\n",
    "plt.xlabel(\"Tests/1M Population\")\n",
    "plt.ylabel(\"Population\")\n",
    "plt.title(\"Scatterplot to show the relationship between Tests/1M Population and Population\\n\\n\")\n",
    "\n",
    "# Print analysis statements\n",
    "print(\"\"\"\n",
    "Analysis:\n",
    "\n",
    "The relationship between Tests/million population and the size of the population is failry consistent,\n",
    "As Tests/1M population increases, the size of the population does not change that much\n",
    "This will help analysts to identify the Tests/million people can grow independent of the population size\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!DOCTYPE html>\n",
    "<html>\n",
    "<body>\n",
    "\n",
    "<h3 style=\"color:blue;\">Finding and analyzing correlations between the variables in the dataset</h3>\n",
    "\n",
    "</body>\n",
    "</html>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total Cases</th>\n",
       "      <th>New Cases</th>\n",
       "      <th>Total Deaths</th>\n",
       "      <th>New Deaths</th>\n",
       "      <th>Total Recovered</th>\n",
       "      <th>New Recovered</th>\n",
       "      <th>Active Cases</th>\n",
       "      <th>Serious,Critical Cases</th>\n",
       "      <th>Cases/1M Population</th>\n",
       "      <th>Deaths/1M Population</th>\n",
       "      <th>Total Tests</th>\n",
       "      <th>Tests/1M Population</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Total Cases</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.677766</td>\n",
       "      <td>0.931509</td>\n",
       "      <td>0.733670</td>\n",
       "      <td>0.998711</td>\n",
       "      <td>0.626524</td>\n",
       "      <td>0.954499</td>\n",
       "      <td>0.781679</td>\n",
       "      <td>0.185919</td>\n",
       "      <td>0.242914</td>\n",
       "      <td>0.898370</td>\n",
       "      <td>0.030070</td>\n",
       "      <td>0.518489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New Cases</th>\n",
       "      <td>0.677766</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.502997</td>\n",
       "      <td>0.977147</td>\n",
       "      <td>0.694337</td>\n",
       "      <td>0.964248</td>\n",
       "      <td>0.563743</td>\n",
       "      <td>0.585933</td>\n",
       "      <td>0.020077</td>\n",
       "      <td>0.035681</td>\n",
       "      <td>0.563372</td>\n",
       "      <td>-0.023616</td>\n",
       "      <td>0.672950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Deaths</th>\n",
       "      <td>0.931509</td>\n",
       "      <td>0.502997</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.609649</td>\n",
       "      <td>0.932542</td>\n",
       "      <td>0.404320</td>\n",
       "      <td>0.859696</td>\n",
       "      <td>0.813761</td>\n",
       "      <td>0.200421</td>\n",
       "      <td>0.335707</td>\n",
       "      <td>0.796247</td>\n",
       "      <td>0.019382</td>\n",
       "      <td>0.399935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New Deaths</th>\n",
       "      <td>0.733670</td>\n",
       "      <td>0.977147</td>\n",
       "      <td>0.609649</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.752444</td>\n",
       "      <td>0.897904</td>\n",
       "      <td>0.597243</td>\n",
       "      <td>0.653151</td>\n",
       "      <td>0.041116</td>\n",
       "      <td>0.084026</td>\n",
       "      <td>0.576367</td>\n",
       "      <td>-0.032006</td>\n",
       "      <td>0.653817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Recovered</th>\n",
       "      <td>0.998711</td>\n",
       "      <td>0.694337</td>\n",
       "      <td>0.932542</td>\n",
       "      <td>0.752444</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.637038</td>\n",
       "      <td>0.938312</td>\n",
       "      <td>0.793630</td>\n",
       "      <td>0.191572</td>\n",
       "      <td>0.251678</td>\n",
       "      <td>0.892555</td>\n",
       "      <td>0.031069</td>\n",
       "      <td>0.526259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New Recovered</th>\n",
       "      <td>0.626524</td>\n",
       "      <td>0.964248</td>\n",
       "      <td>0.404320</td>\n",
       "      <td>0.897904</td>\n",
       "      <td>0.637038</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.556144</td>\n",
       "      <td>0.506191</td>\n",
       "      <td>0.009385</td>\n",
       "      <td>0.012651</td>\n",
       "      <td>0.578430</td>\n",
       "      <td>-0.016750</td>\n",
       "      <td>0.672334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Active Cases</th>\n",
       "      <td>0.954499</td>\n",
       "      <td>0.563743</td>\n",
       "      <td>0.859696</td>\n",
       "      <td>0.597243</td>\n",
       "      <td>0.938312</td>\n",
       "      <td>0.556144</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.661472</td>\n",
       "      <td>0.140447</td>\n",
       "      <td>0.166321</td>\n",
       "      <td>0.889152</td>\n",
       "      <td>0.023879</td>\n",
       "      <td>0.457301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Serious,Critical Cases</th>\n",
       "      <td>0.781679</td>\n",
       "      <td>0.585933</td>\n",
       "      <td>0.813761</td>\n",
       "      <td>0.653151</td>\n",
       "      <td>0.793630</td>\n",
       "      <td>0.506191</td>\n",
       "      <td>0.661472</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.161740</td>\n",
       "      <td>0.296665</td>\n",
       "      <td>0.609893</td>\n",
       "      <td>-0.039577</td>\n",
       "      <td>0.450107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cases/1M Population</th>\n",
       "      <td>0.185919</td>\n",
       "      <td>0.020077</td>\n",
       "      <td>0.200421</td>\n",
       "      <td>0.041116</td>\n",
       "      <td>0.191572</td>\n",
       "      <td>0.009385</td>\n",
       "      <td>0.140447</td>\n",
       "      <td>0.161740</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.795855</td>\n",
       "      <td>0.147750</td>\n",
       "      <td>0.446332</td>\n",
       "      <td>-0.078247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Deaths/1M Population</th>\n",
       "      <td>0.242914</td>\n",
       "      <td>0.035681</td>\n",
       "      <td>0.335707</td>\n",
       "      <td>0.084026</td>\n",
       "      <td>0.251678</td>\n",
       "      <td>0.012651</td>\n",
       "      <td>0.166321</td>\n",
       "      <td>0.296665</td>\n",
       "      <td>0.795855</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.178662</td>\n",
       "      <td>0.264302</td>\n",
       "      <td>-0.035916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Tests</th>\n",
       "      <td>0.898370</td>\n",
       "      <td>0.563372</td>\n",
       "      <td>0.796247</td>\n",
       "      <td>0.576367</td>\n",
       "      <td>0.892555</td>\n",
       "      <td>0.578430</td>\n",
       "      <td>0.889152</td>\n",
       "      <td>0.609893</td>\n",
       "      <td>0.147750</td>\n",
       "      <td>0.178662</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.123939</td>\n",
       "      <td>0.635337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tests/1M Population</th>\n",
       "      <td>0.030070</td>\n",
       "      <td>-0.023616</td>\n",
       "      <td>0.019382</td>\n",
       "      <td>-0.032006</td>\n",
       "      <td>0.031069</td>\n",
       "      <td>-0.016750</td>\n",
       "      <td>0.023879</td>\n",
       "      <td>-0.039577</td>\n",
       "      <td>0.446332</td>\n",
       "      <td>0.264302</td>\n",
       "      <td>0.123939</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.076026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Population</th>\n",
       "      <td>0.518489</td>\n",
       "      <td>0.672950</td>\n",
       "      <td>0.399935</td>\n",
       "      <td>0.653817</td>\n",
       "      <td>0.526259</td>\n",
       "      <td>0.672334</td>\n",
       "      <td>0.457301</td>\n",
       "      <td>0.450107</td>\n",
       "      <td>-0.078247</td>\n",
       "      <td>-0.035916</td>\n",
       "      <td>0.635337</td>\n",
       "      <td>-0.076026</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Total Cases  New Cases  Total Deaths  New Deaths  \\\n",
       "Total Cases                1.000000   0.677766      0.931509    0.733670   \n",
       "New Cases                  0.677766   1.000000      0.502997    0.977147   \n",
       "Total Deaths               0.931509   0.502997      1.000000    0.609649   \n",
       "New Deaths                 0.733670   0.977147      0.609649    1.000000   \n",
       "Total Recovered            0.998711   0.694337      0.932542    0.752444   \n",
       "New Recovered              0.626524   0.964248      0.404320    0.897904   \n",
       "Active Cases               0.954499   0.563743      0.859696    0.597243   \n",
       "Serious,Critical Cases     0.781679   0.585933      0.813761    0.653151   \n",
       "Cases/1M Population        0.185919   0.020077      0.200421    0.041116   \n",
       "Deaths/1M Population       0.242914   0.035681      0.335707    0.084026   \n",
       "Total Tests                0.898370   0.563372      0.796247    0.576367   \n",
       "Tests/1M Population        0.030070  -0.023616      0.019382   -0.032006   \n",
       "Population                 0.518489   0.672950      0.399935    0.653817   \n",
       "\n",
       "                        Total Recovered  New Recovered  Active Cases  \\\n",
       "Total Cases                    0.998711       0.626524      0.954499   \n",
       "New Cases                      0.694337       0.964248      0.563743   \n",
       "Total Deaths                   0.932542       0.404320      0.859696   \n",
       "New Deaths                     0.752444       0.897904      0.597243   \n",
       "Total Recovered                1.000000       0.637038      0.938312   \n",
       "New Recovered                  0.637038       1.000000      0.556144   \n",
       "Active Cases                   0.938312       0.556144      1.000000   \n",
       "Serious,Critical Cases         0.793630       0.506191      0.661472   \n",
       "Cases/1M Population            0.191572       0.009385      0.140447   \n",
       "Deaths/1M Population           0.251678       0.012651      0.166321   \n",
       "Total Tests                    0.892555       0.578430      0.889152   \n",
       "Tests/1M Population            0.031069      -0.016750      0.023879   \n",
       "Population                     0.526259       0.672334      0.457301   \n",
       "\n",
       "                        Serious,Critical Cases  Cases/1M Population  \\\n",
       "Total Cases                           0.781679             0.185919   \n",
       "New Cases                             0.585933             0.020077   \n",
       "Total Deaths                          0.813761             0.200421   \n",
       "New Deaths                            0.653151             0.041116   \n",
       "Total Recovered                       0.793630             0.191572   \n",
       "New Recovered                         0.506191             0.009385   \n",
       "Active Cases                          0.661472             0.140447   \n",
       "Serious,Critical Cases                1.000000             0.161740   \n",
       "Cases/1M Population                   0.161740             1.000000   \n",
       "Deaths/1M Population                  0.296665             0.795855   \n",
       "Total Tests                           0.609893             0.147750   \n",
       "Tests/1M Population                  -0.039577             0.446332   \n",
       "Population                            0.450107            -0.078247   \n",
       "\n",
       "                        Deaths/1M Population  Total Tests  \\\n",
       "Total Cases                         0.242914     0.898370   \n",
       "New Cases                           0.035681     0.563372   \n",
       "Total Deaths                        0.335707     0.796247   \n",
       "New Deaths                          0.084026     0.576367   \n",
       "Total Recovered                     0.251678     0.892555   \n",
       "New Recovered                       0.012651     0.578430   \n",
       "Active Cases                        0.166321     0.889152   \n",
       "Serious,Critical Cases              0.296665     0.609893   \n",
       "Cases/1M Population                 0.795855     0.147750   \n",
       "Deaths/1M Population                1.000000     0.178662   \n",
       "Total Tests                         0.178662     1.000000   \n",
       "Tests/1M Population                 0.264302     0.123939   \n",
       "Population                         -0.035916     0.635337   \n",
       "\n",
       "                        Tests/1M Population  Population  \n",
       "Total Cases                        0.030070    0.518489  \n",
       "New Cases                         -0.023616    0.672950  \n",
       "Total Deaths                       0.019382    0.399935  \n",
       "New Deaths                        -0.032006    0.653817  \n",
       "Total Recovered                    0.031069    0.526259  \n",
       "New Recovered                     -0.016750    0.672334  \n",
       "Active Cases                       0.023879    0.457301  \n",
       "Serious,Critical Cases            -0.039577    0.450107  \n",
       "Cases/1M Population                0.446332   -0.078247  \n",
       "Deaths/1M Population               0.264302   -0.035916  \n",
       "Total Tests                        0.123939    0.635337  \n",
       "Tests/1M Population                1.000000   -0.076026  \n",
       "Population                        -0.076026    1.000000  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Apply correlation method on the full data set\n",
    "data.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Analysis:\n",
      "\n",
      "Strong posiitive correlation between Total Cases and Total Recovered, Total Tests and Active Cases etc.\n",
      "\n",
      "No strong negative correlation present in the data\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Print analysis statements for the correlation\n",
    "print(\"\"\"\n",
    "Analysis:\n",
    "\n",
    "Strong posiitive correlation between Total Cases and Total Recovered, Total Tests and Active Cases etc.\n",
    "\n",
    "No strong negative correlation present in the data\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!DOCTYPE html>\n",
    "<html>\n",
    "<body>\n",
    "\n",
    "<h3 style=\"color:blue;\">Applying a statistical model to collect useful information about Total Cases and Total Deaths in full data set</h3>\n",
    "\n",
    "</body>\n",
    "</html>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Total Cases</td>   <th>  R-squared (uncentered):</th>      <td>   0.875</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared (uncentered):</th> <td>   0.874</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th>          <td>   1544.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 18 May 2021</td> <th>  Prob (F-statistic):</th>          <td>1.12e-101</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>17:37:27</td>     <th>  Log-Likelihood:    </th>          <td> -3409.4</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   222</td>      <th>  AIC:               </th>          <td>   6821.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   221</td>      <th>  BIC:               </th>          <td>   6824.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>              <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>              <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Total Deaths</th> <td>   49.7820</td> <td>    1.267</td> <td>   39.293</td> <td> 0.000</td> <td>   47.285</td> <td>   52.279</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>184.060</td> <th>  Durbin-Watson:     </th> <td>   2.019</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>37287.512</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 2.155</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td>66.344</td>  <th>  Cond. No.          </th> <td>    1.00</td> \n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] R² is computed without centering (uncentered) since the model does not contain a constant.<br/>[2] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                 OLS Regression Results                                \n",
       "=======================================================================================\n",
       "Dep. Variable:            Total Cases   R-squared (uncentered):                   0.875\n",
       "Model:                            OLS   Adj. R-squared (uncentered):              0.874\n",
       "Method:                 Least Squares   F-statistic:                              1544.\n",
       "Date:                Tue, 18 May 2021   Prob (F-statistic):                   1.12e-101\n",
       "Time:                        17:37:27   Log-Likelihood:                         -3409.4\n",
       "No. Observations:                 222   AIC:                                      6821.\n",
       "Df Residuals:                     221   BIC:                                      6824.\n",
       "Df Model:                           1                                                  \n",
       "Covariance Type:            nonrobust                                                  \n",
       "================================================================================\n",
       "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------\n",
       "Total Deaths    49.7820      1.267     39.293      0.000      47.285      52.279\n",
       "==============================================================================\n",
       "Omnibus:                      184.060   Durbin-Watson:                   2.019\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            37287.512\n",
       "Skew:                           2.155   Prob(JB):                         0.00\n",
       "Kurtosis:                      66.344   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] R² is computed without centering (uncentered) since the model does not contain a constant.\n",
       "[2] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get the statsmodel package\n",
    "import statsmodels.api as sm\n",
    "\n",
    "# Apply the statistical model and generate summary data\n",
    "result=sm.OLS(data['Total Cases'], data['Total Deaths']).fit()\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Analysis:\n",
      "\n",
      "The statistical model provides effective insights for the given variables.\n",
      "\n",
      "For example, the coeffiicient variable tells us there is 1 death per 49 cases for the full data set\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Print analysis statements for the statistical model\n",
    "print(\"\"\"\n",
    "Analysis:\n",
    "\n",
    "The statistical model provides effective insights for the given variables.\n",
    "\n",
    "For example, the coeffiicient variable tells us there is 1 death per 49 cases for the full data set\n",
    "\"\"\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
